import java.time.Year

plugins {
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.6.1' apply false
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: 'org.cadixdev.licenser'

defaultTasks 'licenseFormat', 'build'

def determinePatchVersion = {
    // get the name of the last tag
    def tagInfo = new ByteArrayOutputStream()

    exec {
        // this is buggy sometimes: add or remove 'cmd'
        commandLine 'git', 'rev-list', 'HEAD', '--count'
        standardOutput = tagInfo
    }

    return tagInfo.toString().replace("\n", "")
}

def id = id
def name = name
def authors = authors
def description = description
def majorVersion = version_major
def minorVersion = version_minor
def patchVersion = determinePatchVersion()
def apiVersion = majorVersion + '.' + minorVersion
def fullVersion = apiVersion + '.' + patchVersion

group = "net.dirtcraft"
version = apiVersion + '-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// read environment from .env
// this somehow causes a lot of warnings at unrelated locations
Map<String, String> envMap = new HashMap<String, String>()
File envFile = rootProject.file('.env')

if (envFile.exists()) {
    envFile.readLines().each() {
        if (!it.isEmpty() && !it.startsWith("#")) {
            def (key, value) = it.tokenize('=')

            envMap[key] = value
        }
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    compileOnly 'org.checkerframework:checker-qual:3.21.2'
    compileOnly 'com.zaxxer:HikariCP:4.0.3'

    api('org.spongepowered:configurate-core:3.7.2') {
        transitive = false
    }

    api('org.spongepowered:configurate-hocon:3.7.2') {
        transitive = false
    }

    api 'org.hibernate:hibernate-core:5.2.1.Final'
    api 'javax.persistence:javax.persistence-api:2.2'
    api 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
    api 'org.apache.logging.log4j:log4j-api:2.23.1'
    api 'org.apache.logging.log4j:log4j-core:2.23.1'
    api 'com.google.guava:guava:19.0'
    api 'com.typesafe:config:1.4.0'
    api 'com.google.code.gson:gson:2.10'
    api 'commons-io:commons-io:2.11.0'
    api 'mysql:mysql-connector-java:8.0.23'
    api 'org.javassist:javassist:3.30.2-GA'
    api 'org.mariadb.jdbc:mariadb-java-client:3.1.3'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.release = 8
    }
}

jar {
    from '../LICENSE.txt'
}

def checkLicenseUpToDate = { path ->
    if (!rootProject.file(path).readLines().stream().anyMatch { it.contains(Year.now().toString()) }) {
        throw new Exception("${path} does not contain current year.")
    }
}

checkLicenseUpToDate('HEADER.txt')
checkLicenseUpToDate('LICENSE.txt')

license {
    header = rootProject.file('LICENSE.txt')
    include '**/*.java'
    newLine = true
}

javadoc {
    title = "${id} (v ${apiVersion})"
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : name,
                "Specification-Vendor"    : authors,
                "Specification-Version"   : fullVersion,
                "Implementation-Title"    : name,
                "Implementation-Version"  : fullVersion,
                "Implementation-Vendor"   : authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    repositories {
        maven {
            url = uri("https://maven.pkg.github.com/DirtNetwork/StorageUtils")

            credentials {
                username = envMap["USERNAME"]
                password = envMap["TOKEN"]
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
